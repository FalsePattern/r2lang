lexer grammar R2LangLexer;

If: 'if';
Fun: 'fun';
Var: 'var';
Else: 'else';
While: 'while';
Return: 'return';
ShiftLeft: '<<';
ShiftRight: '>>';
Decrement: '--';
Increment: '++';
LessOrEqual: '<=';
GreaterOrEqual: '>=';
EqualCompare: '==';
NotEqualCompare: '!=';
AndAnd: '&&';
PipePipe: '||';
PlusEqual: '+=';
MinusEqual: '-=';
StarEqual: '*=';
SlashEqual: '/=';
PercentEqual: '%=';
ShiftRightEqual: '>>=';
ShiftLeftEqual: '<<=';
AndEqual: '&=';
CaretEqual: '^=';
PipeEqual: '|=';
Caret: '^';
Pipe: '|';
LessThan: '<';
GreaterThan: '>';
Question: '?';
Colon: ':';
Semicolon: ';';
Equal: '=';
Percent: '%';
Slash: '/';
And: '&';
Star: '*';
BwNot: '~';
Not: '!';
Minus: '-';
Plus: '+';
Comma: ',';
OpenP: '(';
CloseP: ')';
OpenB: '{';
CloseB: '}';
OpenBr: '[';
CloseBr: ']';
StringLiteral: UnterminatedStringLiteral '"';
UnterminatedStringLiteral: '"' (~["\\\r\n] | '\\' (. | EOF))*;
Identifier: LETTER ALPHANUMERIC*;
IntegerLiteral: [0-9]+;
fragment ALPHANUMERIC: LETTER | DIGIT | '_';
fragment LETTER: [a-zA-Z];
fragment DIGIT: [0-9];

COMMENT: ('//' .*? '\n') -> skip;
MULTILINE_COMMENT: ('/*' .*? '*/') -> skip;
WHITESPACE: [ \n\r\t] -> skip;